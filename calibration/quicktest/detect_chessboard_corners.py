#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Detect chessboard inner corners on a single image and DISPLAY the result (no saving).

Changes per request:
- Reads the chessboard spec from a JSON generated by gen_chessboard_letter_pdf.py
- Defaults to SB detector (findChessboardCornersSB) if available
- Only shows the annotated image with cv2.imshow; does NOT write to disk

Usage:
python detect_chessboard_corners.py --img input.jpg --cfg chessboard_9x6_25mm.json
# (optional) force classic detector instead of SB:
python detect_chessboard_corners.py --img input.jpg --cfg board.json --classic

Notes
- JSON must contain board_type == "chessboard", and fields squares_x, squares_y.
- Indices drawn follow OpenCV's corner ordering (row-major from top-left).
"""

import argparse
from pathlib import Path
import sys
import json
import cv2
import numpy as np


def load_cfg(json_path: str):
    with open(json_path, 'r', encoding='utf-8') as f:
        cfg = json.load(f)
    if cfg.get('board_type', '').lower() != 'chessboard':
        raise ValueError("JSON board_type must be 'chessboard'.")
    for k in ('squares_x', 'squares_y'):
        if k not in cfg:
            raise KeyError(f"JSON missing field: {k}")
    return int(cfg['squares_x']), int(cfg['squares_y'])


def detect(gray, pattern_size, prefer_sb=True):
    """Return (ok, corners, used_method_str). corners shaped (N,1,2)."""
    # Try SB first if desired and available
    if prefer_sb and hasattr(cv2, 'findChessboardCornersSB'):
        try:
            ok, corners = cv2.findChessboardCornersSB(
                gray, pattern_size, flags=cv2.CALIB_CB_EXHAUSTIVE
            )
            if ok and corners is not None:
                if corners.ndim == 2:
                    corners = corners.reshape(-1, 1, 2)
                return True, corners, 'SB'
        except TypeError:
            # Some OpenCV builds have different SB signatures; ignore and fall back
            pass

    # Classic detector (+ subpix)
    flags = cv2.CALIB_CB_ADAPTIVE_THRESH | cv2.CALIB_CB_NORMALIZE_IMAGE
    ok, corners = cv2.findChessboardCorners(gray, pattern_size, flags)
    if ok and corners is not None:
        criteria = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 1e-4)
        cv2.cornerSubPix(gray, corners, (11, 11), (-1, -1), criteria)
        return True, corners, 'classic+subpix'
    return False, None, 'none'


def annotate(img, corners, pattern_size):
    vis = img.copy()
    # OpenCV helper overlay
    cv2.drawChessboardCorners(vis, pattern_size, corners, True)
    # Draw circles and indices
    for idx, pt in enumerate(corners.reshape(-1, 2)):
        x, y = int(round(pt[0])), int(round(pt[1]))
        cv2.circle(vis, (x, y), 4, (0, 255, 0), -1, cv2.LINE_AA)
        cv2.putText(vis, str(idx), (x + 5, y - 5), cv2.FONT_HERSHEY_SIMPLEX, 0.5,
                    (50, 50, 255), 1, cv2.LINE_AA)
    return vis


def main():
    ap = argparse.ArgumentParser(description='Display chessboard inner corners (no saving)')
    ap.add_argument('--img', required=True, help='Path to input image (jpg/png)')
    ap.add_argument('--cfg', required=True, help='Chessboard JSON from gen_chessboard_letter_pdf.py')
    ap.add_argument('--classic', action='store_true', help='Force classic detector instead of SB')
    args = ap.parse_args()

    # Read image
    img = cv2.imread(args.img)
    if img is None:
        print(f'[ERR] Cannot read image: {args.img}')
        sys.exit(1)

    # Read chessboard spec from JSON
    try:
        nx, ny = load_cfg(args.cfg)
    except Exception as e:
        print(f'[ERR] Failed to load JSON: {e}')
        sys.exit(2)

    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    pattern_size = (nx, ny)
    print(pattern_size)

    ok, corners, method = detect(gray, pattern_size, prefer_sb=(not args.classic))
    if not ok:
        print('[FAIL] Chessboard NOT found.')
        sys.exit(3)

    n_found = len(corners.reshape(-1, 2))
    print(f'[OK] Found {n_found} corners using method: {method}  (pattern={nx}x{ny} inner)')

    vis = annotate(img, corners, pattern_size)

    # --- DISPLAY ONLY ---
    win = f'Chessboard corners ({method})'
    try:
        cv2.imshow(win, vis)
        cv2.waitKey(0)
        cv2.destroyAllWindows()
    except cv2.error as err:
        print('[WARN] imshow failed (headless environment?). Will print the corner coordinates instead.')
        # Fallback: print first few corner coordinates for sanity check
        pts = corners.reshape(-1, 2)
        for i in range(min(10, len(pts))):
            print(f'  idx={i:3d}  x={pts[i,0]:.2f}  y={pts[i,1]:.2f}')


if __name__ == '__main__':
    main()
